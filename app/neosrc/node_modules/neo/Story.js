const path = require('path');

const log = require('log');

const Author = require('./Author.js');
const JSONPackageFile = require('./JSONPackageFile.js')

module.exports = class Story {
  /** Check if given path is a neo story or template. */
  static isStory(filePath) {
    return ['.nsf', '.ntf'].indexOf(path.extname(filePath).toLowerCase()) > -1;
  }

  /** Construct a new Story from a file path, Author, or a JSON object. The JSON object
  constructor is intended for deserialization. */
  constructor(o) {
    if (typeof o == 'string') {
      this.jpf = new JSONPackageFile(o);
      log.debug('Story JPF type', this.jpf.typeURL);
    } else if (o instanceof Author) {
      this.Author = o;
    } else if (typeof o == 'object') {
      Object.assign(this, o);
    }
  }

  /** The neo Author object who created this story. **/
  get Author() {
    return this._Author;
  }

  set Author(newAuthor) {
    this._Author = newAuthor;
  }

  /** The type of story object (based on the anchor from the JPF URL). */
  get storyType() {
    return this.jpf.typeURL.split('#')[1];
  }

  /** Returns true if this document is a neo template. */
  get isTemplate() {
    return this.storyType == 'NeoTemplateFile';
  }

  get metadata() {
    return this.jpf.metadata;
  }

  /** Internal property for JSON package file that backs this story. */
  get jpf() {
    if (!this._jpf) {
      this._jpf = new JSONPackageFile();
    }

    return this._jpf;
  }

  set jpf(newJpf) {
    this._jpf = newJpf;
  }
}
