var levels = ['error', 'warn', 'info', 'debug'];
var buffer = [];
var max_buffer = 1000;

function write(level, args) {
  function objToString(o) {
    if (o instanceof Error) {
      return module.exports.level == 'debug' ? o.message + ': ' + o.stack : o.message;
    }

    return JSON.stringify(o);
  }

  if (levels.indexOf(level) > levels.indexOf(module.exports.level)) {
    return;
  }

  var message = args.reduce(function (p, c) {
    if (c == undefined) {
      return p + ': (undefined)';
    } else {
      return typeof c == 'object' ? (p ? p + ': ' + objToString(c) : objToString(c)) : (p ? p + ' ' + c.toString() : c.toString());
    }
  }, '');

  var ts = (new Date()).toISOString();
  console.log(ts + ': ' + level + ': ' + message);
  buffer.push({timestamp: ts, level, message});

  if (max_buffer >= 0 && buffer.length > max_buffer) {
    buffer.splice(0, buffer.length - max_buffer);
  }
}

module.exports = {
  levels,
  debugging: () => module.exports.level == 'debug',
  level: process.env.LOG_LEVEL || 'info',
  write,
  error: function (message) { write('error', Array.from(arguments)); },
  warn: function (message) { write('warn', Array.from(arguments)); },
  info: function (message) { write('info', Array.from(arguments)); },
  debug: function (message) { write('debug', Array.from(arguments)); },
  buffer,
  max_buffer
};
